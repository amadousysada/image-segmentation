#!/usr/bin/env python3
"""
Script de d√©bogage pour diagnostiquer les probl√®mes de forme des mod√®les

Ce script aide √† identifier et r√©soudre les erreurs de taille entre les masques
et les pr√©dictions des mod√®les de segmentation.
"""

import sys
import os

# Add current directory to path to import models
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    import tensorflow as tf
    from models import create_model, debug_model_output_shape, dice_loss
    print("‚úì TensorFlow et models import√©s avec succ√®s")
except ImportError as e:
    print(f"‚úó Erreur d'importation: {e}")
    print("Assurez-vous que TensorFlow est install√© : pip install tensorflow")
    sys.exit(1)

def test_model_shapes():
    """Test les formes de sortie des diff√©rents mod√®les"""
    
    print("="*60)
    print("TEST DES FORMES DE MOD√àLES")
    print("="*60)
    
    input_shapes = [(224, 224, 3), (256, 256, 3), (512, 512, 3)]
    model_types = ['unet_mini', 'vgg16_unet', 'resnet50_unet']
    
    results = {}
    
    for input_shape in input_shapes:
        print(f"\nüìê Test avec input_shape: {input_shape}")
        print("-" * 50)
        
        for model_type in model_types:
            try:
                print(f"\nMod√®le: {model_type}")
                
                # Cr√©er le mod√®le
                model = create_model(model_type, input_shape, num_classes=8)
                
                # Tester la forme de sortie
                output_shape = debug_model_output_shape(model, input_shape)
                
                # V√©rifier la coh√©rence
                input_h, input_w = input_shape[:2]
                output_h, output_w = output_shape[1:3]
                
                if input_h == output_h and input_w == output_w:
                    status = "‚úÖ CORRECT"
                else:
                    status = f"‚ùå ERREUR - Tailles diff√©rentes: {input_h}x{input_w} vs {output_h}x{output_w}"
                
                print(f"Status: {status}")
                
                results[f"{model_type}_{input_shape}"] = {
                    'input_shape': input_shape,
                    'output_shape': output_shape,
                    'status': status
                }
                
            except Exception as e:
                print(f"‚ùå Erreur avec {model_type}: {str(e)}")
                results[f"{model_type}_{input_shape}"] = {
                    'input_shape': input_shape,
                    'error': str(e)
                }
    
    return results

def test_loss_functions():
    """Test les fonctions de perte avec diff√©rentes tailles"""
    
    print("\n" + "="*60)
    print("TEST DES FONCTIONS DE PERTE")
    print("="*60)
    
    # Cr√©er un mod√®le de test
    model = create_model('unet_mini', (224, 224, 3), 8)
    
    # Test avec diff√©rentes tailles de masque
    test_cases = [
        {"name": "Tailles correctes", "img_size": (224, 224), "mask_size": (224, 224)},
        {"name": "Masque plus petit", "img_size": (224, 224), "mask_size": (112, 112)},
        {"name": "Masque plus grand", "img_size": (224, 224), "mask_size": (448, 448)},
    ]
    
    for case in test_cases:
        print(f"\nüß™ Test: {case['name']}")
        print(f"Image: {case['img_size']}, Masque: {case['mask_size']}")
        
        try:
            # Cr√©er des donn√©es de test
            batch_size = 2
            img_h, img_w = case['img_size']
            mask_h, mask_w = case['mask_size']
            
            # Image d'entr√©e
            test_images = tf.random.normal((batch_size, img_h, img_w, 3))
            
            # Masque de v√©rit√© terrain
            test_masks = tf.random.uniform((batch_size, mask_h, mask_w), 0, 8, dtype=tf.int32)
            
            # Pr√©diction du mod√®le
            predictions = model(test_images, training=False)
            
            print(f"  Forme des images: {test_images.shape}")
            print(f"  Forme des masques: {test_masks.shape}")
            print(f"  Forme des pr√©dictions: {predictions.shape}")
            
            # Test de la fonction de perte
            loss_value = dice_loss(test_masks, predictions)
            print(f"  ‚úÖ Dice Loss: {loss_value:.4f}")
            
        except Exception as e:
            print(f"  ‚ùå Erreur: {str(e)}")

def test_specific_error():
    """Test du cas d'erreur sp√©cifique mentionn√©"""
    
    print("\n" + "="*60)
    print("TEST DU CAS D'ERREUR SP√âCIFIQUE")
    print("="*60)
    
    print("Reproduction de l'erreur:")
    print("target.shape=(None, 224, 224), output.shape=(None, 448, 448, 8)")
    
    try:
        # Cr√©er le sc√©nario probl√©matique
        model = create_model('vgg16_unet', (224, 224, 3), 8)
        
        # Test avec une image 224x224
        test_image = tf.random.normal((1, 224, 224, 3))
        prediction = model(test_image, training=False)
        
        print(f"\nR√©sultat du test:")
        print(f"Input shape: {test_image.shape}")
        print(f"Output shape: {prediction.shape}")
        
        # V√©rifier si l'erreur est corrig√©e
        if prediction.shape[1] == 224 and prediction.shape[2] == 224:
            print("‚úÖ CORRIG√â - Les tailles correspondent maintenant!")
        else:
            print(f"‚ùå PROBL√àME PERSISTANT - Taille de sortie: {prediction.shape[1]}x{prediction.shape[2]}")
            
            # Proposer une solution
            print("\nüîß SOLUTION PROPOS√âE:")
            print("1. V√©rifier l'architecture du mod√®le VGG16-UNet")
            print("2. S'assurer que les upsampling layers sont correctement configur√©s")
            print("3. Utiliser les fonctions de perte corrig√©es qui redimensionnent automatiquement")
        
        # Test avec la fonction de perte corrig√©e
        test_mask = tf.random.uniform((1, 224, 224), 0, 8, dtype=tf.int32)
        loss_value = dice_loss(test_mask, prediction)
        print(f"\n‚úÖ Test de loss function corrig√©e: {loss_value:.4f}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")

def main():
    """Fonction principale de d√©bogage"""
    
    print("D√âBOGAGE DES FORMES DE MOD√àLES DE SEGMENTATION")
    print("=" * 60)
    
    # Test 1: Formes des mod√®les
    results = test_model_shapes()
    
    # Test 2: Fonctions de perte
    test_loss_functions()
    
    # Test 3: Cas d'erreur sp√©cifique
    test_specific_error()
    
    # R√©sum√© des solutions
    print("\n" + "="*60)
    print("SOLUTIONS IMPLEMENT√âES")
    print("="*60)
    print("‚úÖ 1. Architecture VGG16-UNet corrig√©e")
    print("‚úÖ 2. Fonctions de perte avec redimensionnement automatique")
    print("‚úÖ 3. Fonction de d√©bogage des formes")
    print("‚úÖ 4. Gestion automatique des incompatibilit√©s de taille")
    
    print("\nüìã RECOMMANDATIONS:")
    print("1. Utilisez debug_model_output_shape() pour v√©rifier vos mod√®les")
    print("2. Les fonctions de perte sont maintenant robustes aux diff√©rences de taille")
    print("3. En cas de probl√®me, le redimensionnement automatique est appliqu√©")
    
    print("\nüîß COMMANDES DE TEST:")
    print("python debug_model_shapes.py")
    print("python -c \"from models import *; model = create_model('vgg16_unet'); debug_model_output_shape(model)\"")

if __name__ == "__main__":
    main()